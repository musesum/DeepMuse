"panel.shader.color": {
    "base": {
        "type": "color",
        "title": "Color",
        "frame": "(x 0, y 0, w 250, h 130)",
        "icon": "icon.pal.main.png",
    },
    "controls": {
        "hide": {
            "type": "panelx",
            "title": "hide",
            "frame": "(x 0, y 0, w 40, h 40)",
            "icon": "icon.thumb.X.png",
            "value": "(0..1)"
        },
        "palFade": {
            "type": "slider",
            "title": "Palette Cross Fade",
            "frame": "(x 10, y 44, w 192, h 32)",
            "icon": "icon.pearl.white.png",
            "value": "(0..1) <> sky.color.xfade",
            "lag": 0
        },
        "bitplane": {
            "type": "slider",
            "title": "Bit Plane",
            "frame": "(x 10, y 84, w 192, h 32)",
            "icon": "icon.pearl.white.png",
            "value": "(0..1) >> sky.shader.color.buffer.bitplane"
        }
        "fillOne": {
            "type": "trigger",
            "title": "Fill Ones",
            "frame": "(x 210, y 84, w 32, h 32)",
            "icon": "icon.drop.gray.png",
            "value": "(0..1) >> sky.draw.screen.fillOne"
        }
    }
}

"tr3": { "~": "name (edges | values | branches | comment)*",
    "edges": { "~": "edgeOp (edgePar| edge) comment*",
        "edgeOp": { "~": "'^([<][<⋯!@&\=\╌>]+|[⋯!@&\=\╌>]+[>])'"},
        "edgePar": { "~": "\"(\" edge+ \")\""},
        "edge": { "~": "exprOp? (name | scalar | ternary) comma?"},
    },
    "values": { "~": "exprs | quote | scalar | ternary | embed",
        "exprs": { "~": "\"(\" expr+ \")\"",
            "expr": { "~": "exprOp? (name | scalar | ternary) comma?" },
            "exprOp": { "~": "'^(<=|>=|==|\!=|<|>|\*|\/|\+|\-|\%|in)'" },
        },
        "scalar": { "~": "(thru | modu | data | num) comma?",
            "thru": {"~": "min \"..\" max (\"=\" dflt)?" },
            "modu": {"~": "\"%\" max (\"=\" dflt)?" },
            "index": {"~": "\"[\" (name|num) \"]" },
            "data": {"~": "\"*\"" },
            "min": {"~": "num" },
            "max": {"~": "num" },
            "dflt": {"~": "\"=\" num" },
            "num": {"~": "'^([+-]*([0-9]+[.][0-9]+|[.][0-9]+|[0-9]+[.](?![.])|[0-9]+)([e][+-][0-9]+)?)'"},
        },
        "ternary": { "~": "ternIf ternThen ternElse? ternRadio?",
            "ternIf": { "~": "expr" },
            "ternThen": { "~": "\"?\" expr" },
            "ternElse": { "~": "\":\" expr" },
            "ternRadio": { "~": "\"|\" ternary" },
        },
        "embed": { "~": "'^[{][{](?s)(.*?)[}][}]'" },
    },
    "branches": { "~": "child | many | array | copyat",
        "child": { "~": "\"{\" comment* tr3+ \"}\"" },
        "many": { "~": "\".\"" \"{\" tr3+ \"}\"" },
        "array": { "~": "\"[\" thru \"]\"" },
        "copyat": { "~": "\"@\" nodes" },
    },
    "quote": { "~": "'^\"([^\"]*)\"'" },
    "name": { "~": "'^([A-Za-z_][A-Za-z0-9_]*)'"
    "comment": { "~": "'^([,]+|^[/]{2,}[ ]*(.*?)[\n\r\t]+|\/[*]+.*?\*\/)'" },
}

class Tr3: ParOne {
    class Node: ParAny {
        class Name: ParAny {}
        class Path: ParAny {}
        var name: [Name]
    }
    class Edges: ParAny {
        class EdgeOp: ParAny {}
        class Edge: ParAny {
            class exprOp: ParAny {}
            class name: ParAny {}
            scalar: ParAny {}
            ternary comma?
        }
        var edgeOp: EdgeOp
        var edge: [Edge] // (_ <b>+ _ | <b>) => <b>s+ // edgeParen edge
        var values: [Values]

    }
    class values: ParAny {
         class exprs: ParAny {}
         class quote: ParAny {}
         class scalar: ParAny {}
         class ternary: ParAny {}
         class embed: ParAny {}
    }
    class quote: ParAny {}
    class comment: ParAny {}
}

